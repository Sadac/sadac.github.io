---
import PageLayout from '@/layouts/BaseLayout.astro'
import Button from '@/components/Button.astro'

const meta = {
	title: 'Contact Me',
	description: 'Get in touch with me for collaborations, questions, or just to say hello!'
}
---

<PageLayout meta={meta}>
	<div class='w-full max-w-2xl'>
		<Button title='Back' href='/' style='button'>
			<svg
				xmlns='http://www.w3.org/2000/svg'
				width='14'
				height='14'
				viewBox='0 0 24 24'
				slot='icon-before'
			>
				<path
					fill='currentColor'
					d='m6.921 12.5l5.792 5.792L12 19l-7-7l7-7l.713.708L6.921 11.5H19v1z'
				>
				</path>
			</svg>
		</Button>

		<h1 class='mb-6 mt-5 text-3xl font-bold'>Contact Me</h1>
		
		<div class='mb-8'>
			<p class='text-muted-foreground mb-4'>
				I'd love to hear from you! Whether you have a question about my work, want to collaborate on a project, 
				or just want to say hello, feel free to reach out.
			</p>
			<p class='text-muted-foreground'>
				I'll do my best to respond within 24-48 hours.
			</p>
		</div>

		{/* Success Message */}
		<div id='success-message' class='mb-6 p-4 bg-green-100 dark:bg-green-900/20 border border-green-300 dark:border-green-700 rounded-md hidden'>
			<p class='text-green-800 dark:text-green-200'></p>
		</div>

		{/* General Error */}
		<div id='error-message' class='mb-6 p-4 bg-red-100 dark:bg-red-900/20 border border-red-300 dark:border-red-700 rounded-md hidden'>
			<p class='text-red-800 dark:text-red-200'></p>
		</div>

		{/* Contact Form */}
		<form id='contact-form' class='space-y-6'>
			{/* Name Field */}
			<div>
				<label for='name' class='block text-sm font-medium mb-2'>
					Name <span class='text-red-500'>*</span>
				</label>
				<input
					type='text'
					id='name'
					name='name'
					required
					class='w-full px-4 py-3 border border-input rounded-md bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-colors'
					placeholder='Your full name'
				/>
				<p id='name-error' class='mt-1 text-sm text-red-600 dark:text-red-400 hidden'></p>
			</div>

			{/* Email Field */}
			<div>
				<label for='email' class='block text-sm font-medium mb-2'>
					Email <span class='text-red-500'>*</span>
				</label>
				<input
					type='email'
					id='email'
					name='email'
					required
					class='w-full px-4 py-3 border border-input rounded-md bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-colors'
					placeholder='your.email@example.com'
				/>
				<p id='email-error' class='mt-1 text-sm text-red-600 dark:text-red-400 hidden'></p>
			</div>

			{/* Message Field */}
			<div>
				<label for='message' class='block text-sm font-medium mb-2'>
					Message <span class='text-red-500'>*</span>
				</label>
				<textarea
					id='message'
					name='message'
					rows='6'
					required
					class='w-full px-4 py-3 border border-input rounded-md bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-colors resize-vertical'
					placeholder='Tell me about your project, question, or just say hello...'
				></textarea>
				<p id='message-error' class='mt-1 text-sm text-red-600 dark:text-red-400 hidden'></p>
			</div>

			{/* Submit Button */}
			<div class='flex justify-end'>
				<button
					type='submit'
					id='submit-btn'
					class='px-6 py-3 bg-primary text-primary-foreground rounded-md font-medium hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed'
				>
					<span id='submit-text'>Send Message</span>
					<span id='submit-loading' class='hidden'>Sending...</span>
				</button>
			</div>
		</form>

		{/* Alternative Contact Methods */}
		<div class='mt-12 pt-8 border-t border-border'>
			<h2 class='text-xl font-semibold mb-4'>Other Ways to Connect</h2>
			<div class='space-y-3'>
				<div class='flex items-center gap-3'>
					<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' class='h-5 w-5 text-muted-foreground'>
						<path fill='currentColor' d='M0 1.146C0 .513.526 0 1.175 0h13.65C15.474 0 16 .513 16 1.146v13.708c0 .633-.526 1.146-1.175 1.146H1.175C.526 16 0 15.487 0 14.854zm4.943 12.248V6.169H2.542v7.225zm-1.2-8.212c.837 0 1.358-.554 1.358-1.248c-.015-.709-.52-1.248-1.342-1.248S2.4 3.226 2.4 3.934c0 .694.521 1.248 1.327 1.248zm4.908 8.212V9.359c0-.216.016-.432.08-.586c.173-.431.568-.878 1.232-.878c.869 0 1.216.662 1.216 1.634v3.865h2.401V9.25c0-2.22-1.184-3.252-2.764-3.252c-1.274 0-1.845.7-2.165 1.193v.025h-.016l.016-.025V6.169h-2.4c.03.678 0 7.225 0 7.225z'/>
					</svg>
					<a 
						href='https://www.linkedin.com/in/rocco-sada/' 
						target='_blank'
						class='text-foreground hover:text-foreground/75 transition-colors'
					>
						Connect on LinkedIn
					</a>
				</div>
			</div>
		</div>
	</div>
</PageLayout>

<script>
	const form = document.getElementById('contact-form') as HTMLFormElement
	const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement
	const submitText = document.getElementById('submit-text') as HTMLSpanElement
	const submitLoading = document.getElementById('submit-loading') as HTMLSpanElement
	const successMessage = document.getElementById('success-message') as HTMLDivElement
	const errorMessage = document.getElementById('error-message') as HTMLDivElement

	function showMessage(element: HTMLDivElement, message: string) {
		element.querySelector('p')!.textContent = message
		element.classList.remove('hidden')
	}

	function hideMessages() {
		successMessage.classList.add('hidden')
		errorMessage.classList.add('hidden')
		document.querySelectorAll('[id$="-error"]').forEach(el => el.classList.add('hidden'))
	}

	function showFieldError(field: string, message: string) {
		const errorEl = document.getElementById(`${field}-error`) as HTMLParagraphElement
		const inputEl = document.getElementById(field) as HTMLInputElement | HTMLTextAreaElement
		
		errorEl.textContent = message
		errorEl.classList.remove('hidden')
		inputEl.classList.add('border-red-500', 'dark:border-red-400')
		inputEl.classList.remove('border-input')
	}

	function clearFieldErrors() {
		document.querySelectorAll('[id$="-error"]').forEach(el => {
			el.classList.add('hidden')
		})
		document.querySelectorAll('input, textarea').forEach(el => {
			el.classList.remove('border-red-500', 'dark:border-red-400')
			el.classList.add('border-input')
		})
	}

	function validateForm(formData: FormData) {
		const errors: Record<string, string> = {}
		
		const name = formData.get('name')?.toString() || ''
		const email = formData.get('email')?.toString() || ''
		const message = formData.get('message')?.toString() || ''

		if (name.length < 2) errors.name = 'Name must be at least 2 characters'
		if (name.length > 50) errors.name = 'Name must be less than 50 characters'
		
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		if (!emailRegex.test(email)) errors.email = 'Please enter a valid email address'
		
		if (message.length < 10) errors.message = 'Message must be at least 10 characters'
		if (message.length > 1000) errors.message = 'Message must be less than 1000 characters'

		return errors
	}

	async function sendEmail(data: { name: string; email: string; message: string }) {
		const lambdaEndpoint = 'https://gfkza6qzocvonsq5rbth57bvjy0pcruv.lambda-url.us-east-1.on.aws/'
		
		const response = await fetch(lambdaEndpoint, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Origin: 'https://roccosada.com'
			},
			body: JSON.stringify(data)
		})

		if (!response.ok) {
			throw new Error(`HTTP error! status: ${response.status}`)
		}

		const result = await response.json()
		if (!result.success) {
			throw new Error('Email sending failed')
		}

		return result
	}

	form.addEventListener('submit', async (e) => {
		e.preventDefault()
		
		hideMessages()
		clearFieldErrors()

		const formData = new FormData(form)
		const errors = validateForm(formData)

		if (Object.keys(errors).length > 0) {
			Object.entries(errors).forEach(([field, message]) => {
				showFieldError(field, message)
			})
			return
		}

		// Show loading state
		submitBtn.disabled = true
		submitText.classList.add('hidden')
		submitLoading.classList.remove('hidden')

		try {
			const data = {
				name: formData.get('name')?.toString() || '',
				email: formData.get('email')?.toString() || '',
				message: formData.get('message')?.toString() || ''
			}

			await sendEmail(data)
			
			showMessage(successMessage, "Thank you for your message! I'll get back to you soon.")
			form.reset()
		} catch (error) {
			console.error('Error sending email:', error)
			showMessage(errorMessage, 'There was an error sending your message. Please try again or contact me directly.')
		} finally {
			// Reset button state
			submitBtn.disabled = false
			submitText.classList.remove('hidden')
			submitLoading.classList.add('hidden')
		}
	})
</script>
